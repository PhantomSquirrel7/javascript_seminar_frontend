/**
 * globy-backend
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../../swagger-configs/encoder';

import { Observable }                                        from 'rxjs';

import { Body6 } from '../../models/swagger-model/body6';
import { Body7 } from '../../models/swagger-model/body7';
import { InlineResponse2001 } from '../../models/swagger-model/inlineResponse2001';
import { InlineResponse2002 } from '../../models/swagger-model/inlineResponse2002';
import { InlineResponse2003 } from '../../models/swagger-model/inlineResponse2003';
import { InlineResponse2004 } from '../../models/swagger-model/inlineResponse2004';
import { InlineResponse400 } from '../../models/swagger-model/inlineResponse400';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../../swagger-configs/variables';
import { Configuration }                                     from '../../swagger-configs/configuration';


@Injectable()
export class ClassesService {

    protected basePath = 'http://localhost:36640/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * delete the class
     * delete the class
     * @param classId Class id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public classesClassIdDelete(classId: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2003>;
    public classesClassIdDelete(classId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2003>>;
    public classesClassIdDelete(classId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2003>>;
    public classesClassIdDelete(classId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (classId === null || classId === undefined) {
            throw new Error('Required parameter classId was null or undefined when calling classesClassIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<InlineResponse2003>('delete',`${this.basePath}/classes/${encodeURIComponent(String(classId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find similar classes
     * Find similar classes to match with. It returns all classes that are from a different teacher, with the same subject, language and languageLevel. Also the level of the classes must be similar (+-1) and the number of students as well (+-4). Additionally the request can be filtered for projectDuration, meetingFrequency and country
     * @param classId Class id
     * @param projectDuration 
     * @param meetingFrequency 
     * @param country 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public classesClassIdFindGet(classId: string, projectDuration?: string, meetingFrequency?: string, country?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Body7>>;
    public classesClassIdFindGet(classId: string, projectDuration?: string, meetingFrequency?: string, country?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Body7>>>;
    public classesClassIdFindGet(classId: string, projectDuration?: string, meetingFrequency?: string, country?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Body7>>>;
    public classesClassIdFindGet(classId: string, projectDuration?: string, meetingFrequency?: string, country?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (classId === null || classId === undefined) {
            throw new Error('Required parameter classId was null or undefined when calling classesClassIdFindGet.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (projectDuration !== undefined && projectDuration !== null) {
            queryParameters = queryParameters.set('projectDuration', <any>projectDuration);
        }
        if (meetingFrequency !== undefined && meetingFrequency !== null) {
            queryParameters = queryParameters.set('meetingFrequency', <any>meetingFrequency);
        }
        if (country !== undefined && country !== null) {
            queryParameters = queryParameters.set('country', <any>country);
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Body7>>('get',`${this.basePath}/classes/${encodeURIComponent(String(classId))}/find`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a class
     * get the class
     * @param classId Class id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public classesClassIdGet(classId: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2003>;
    public classesClassIdGet(classId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2003>>;
    public classesClassIdGet(classId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2003>>;
    public classesClassIdGet(classId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (classId === null || classId === undefined) {
            throw new Error('Required parameter classId was null or undefined when calling classesClassIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<InlineResponse2003>('get',`${this.basePath}/classes/${encodeURIComponent(String(classId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update classes
     * 
     * @param body 
     * @param classId Class id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public classesClassIdPut(body: Body7, classId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public classesClassIdPut(body: Body7, classId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public classesClassIdPut(body: Body7, classId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public classesClassIdPut(body: Body7, classId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling classesClassIdPut.');
        }

        if (classId === null || classId === undefined) {
            throw new Error('Required parameter classId was null or undefined when calling classesClassIdPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/classes/${encodeURIComponent(String(classId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getStudents
     * get all students in one class
     * @param classId Class id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public classesClassIdStudentsGet(classId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<InlineResponse2004>>;
    public classesClassIdStudentsGet(classId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<InlineResponse2004>>>;
    public classesClassIdStudentsGet(classId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<InlineResponse2004>>>;
    public classesClassIdStudentsGet(classId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (classId === null || classId === undefined) {
            throw new Error('Required parameter classId was null or undefined when calling classesClassIdStudentsGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<InlineResponse2004>>('get',`${this.basePath}/classes/${encodeURIComponent(String(classId))}/students`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * removeStudent
     * remove a student in one class
     * @param classId Class id
     * @param studentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public classesClassIdStudentsStudentIdDelete(classId: string, studentId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<InlineResponse2004>>;
    public classesClassIdStudentsStudentIdDelete(classId: string, studentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<InlineResponse2004>>>;
    public classesClassIdStudentsStudentIdDelete(classId: string, studentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<InlineResponse2004>>>;
    public classesClassIdStudentsStudentIdDelete(classId: string, studentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (classId === null || classId === undefined) {
            throw new Error('Required parameter classId was null or undefined when calling classesClassIdStudentsStudentIdDelete.');
        }

        if (studentId === null || studentId === undefined) {
            throw new Error('Required parameter studentId was null or undefined when calling classesClassIdStudentsStudentIdDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<InlineResponse2004>>('delete',`${this.basePath}/classes/${encodeURIComponent(String(classId))}/students/${encodeURIComponent(String(studentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * addStudent
     * add a student in one class
     * @param classId Class id
     * @param studentId Student id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public classesClassIdStudentsStudentIdPut(classId: string, studentId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<InlineResponse2004>>;
    public classesClassIdStudentsStudentIdPut(classId: string, studentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<InlineResponse2004>>>;
    public classesClassIdStudentsStudentIdPut(classId: string, studentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<InlineResponse2004>>>;
    public classesClassIdStudentsStudentIdPut(classId: string, studentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (classId === null || classId === undefined) {
            throw new Error('Required parameter classId was null or undefined when calling classesClassIdStudentsStudentIdPut.');
        }

        if (studentId === null || studentId === undefined) {
            throw new Error('Required parameter studentId was null or undefined when calling classesClassIdStudentsStudentIdPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<InlineResponse2004>>('put',`${this.basePath}/classes/${encodeURIComponent(String(classId))}/students/${encodeURIComponent(String(studentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all classes
     * get a list of classes(only the clsses of this specific teacher)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public classesGet(observe?: 'body', reportProgress?: boolean): Observable<Array<InlineResponse2001>>;
    public classesGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<InlineResponse2001>>>;
    public classesGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<InlineResponse2001>>>;
    public classesGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<InlineResponse2001>>('get',`${this.basePath}/classes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new class
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public classesPost(body: Body6, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2002>;
    public classesPost(body: Body6, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2002>>;
    public classesPost(body: Body6, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2002>>;
    public classesPost(body: Body6, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling classesPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<InlineResponse2002>('post',`${this.basePath}/classes`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
